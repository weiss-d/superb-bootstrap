#!/bin/sh

#    ____    __
#   / __/__ / /___ _____
#  _\ \/ -_) __/ // / _ \
# /___/\__/\__/\_,_/ .__/
#                 /_/

# Add description here:
# > Hello World!
# > This is my setup script.


# Values
#. "$DOTFILES_PATH/home/.config/env" # Get your environment variables if you have

STEPS="${*:-install before home root after}" # Default order of steps

#TRASH_PATH="${XDG_DATA_HOME:-$HOME/.local/share}/Trash/files" # Uncomment this if you want to move conflict files to trash instead of delete it


# Functions
install_packages() {
	printf '\n\033[1;7;34m%s\033[0m\n' 'Install packages'

	# Arch Linux: Add keyring and mirrolis to be able to install packages from 'chaotic-aur' 
	#$Pacman_COMMAND git base-devel
	#git clone 'https://aur.archlinux.org/chaotic-keyring.git' "$TEMPORARY/chaotic-keyring"
	#cd "$TEMPORARY/chaotic-keyring" || exit 1
	#makepkg --noconfirm
	#$PERMISSION_COMMAND pacman --noconfirm --needed --upgrade chaotic-keyring-*.zst 
	#git clone 'https://aur.archlinux.org/chaotic-mirrorlist.git' "$TEMPORARY/chaotic-mirrorlist"
	#cd "$TEMPORARY/chaotic-mirrorlist" || exit 1
	#makepkg --noconfirm
	#$PERMISSION_COMMAND pacman --noconfirm --needed --upgrade chaotic-mirrorlist-*.zst   
	#cd "$WD" || exit 1

	# For Arco Linux
	#$PERMISSION_COMMAND sh -c "printf '\n[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist' >> /etc/pacman.conf"

	superbbootstrap_install_packages "$DOTFILES_PATH/packageslist" # you can change packageslist's path here

	# Add more packages that you want to install here
	#printf '\n\033[1;7;34m%s\033[0m\n' 'Install extra packages'
	#pip install --upgrade 'git+https://github.com/will8211/unimatrix.git'
}

symlink_home() {
	printf '\n\033[1;7;36m%s\033[0m\n' "Symlink to home ($HOME)"

	superbbootstrap_batch_symlink "$DOTFILES_PATH/home" "$HOME"

	# Use this if you want to batch symlink with bsymlink
	#bsymlink "$DOTFILES_PATH/home" "$HOME"

	# Use this if you want to batch symlink with stow (you must cd to the directory that contain this setup file)
	#stow -vt ~ home
}

symlink_root() {
	printf '\n\033[1;7;36m%s\033[0m\n' 'Symlink to root (/)'

	superbbootstrap_batch_symlink "$DOTFILES_PATH/root" '/' "$PERMISSION_COMMAND"

	# Use this if you want to batch symlink with bsymlink
	#$PERMISSION_COMMAND bsymlink "$DOTFILES_PATH/root" '/'

	# Use this if you want to batch symlink with stow (you must cd to the directory that contain this setup file)
	#$PERMISSION_COMMAND stow -vt / root
}

before_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup before symlink'

	# Remove files that may conflict when symlink dotfiles
	#rm .bashrc

	# Remove conflicting items in $HOME/.config
	#[ -d "$HOME/.config" ] && for config_directory_path in "$HOME/.config/."* "$HOME/.config/"*; do
	#	config_directory_name="${config_directory_path#$XDG_CONFIG_HOME/}"
	#
	#	if [ "$config_directory_name" != '.' ] && [ "$config_directory_name" != '..' ] && [ -e "$HOME/dots/home/.config/$config_directory_name" ]; then
	#		rm "$config_directory_path"
	#	fi
	#done

	# Create directories (to symlink files inside only, not the directory itself)
	#mkdir "$HOME/.config" "$HOME/.local/share" "$HOME/.local/bin" "$HOME/.cache"
}

after_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup after symlink'

	# Change default shell
	#chsh -s "$(command -v bash)"

	# Enable firewall
	#$PERMISSION_COMMAND ufw enable
}


# SBB #########################################################################

# WARNING !!!
# Don't touch anything from this point to the end of file
# if you don't know what you are doing.


# Values
WD="$PWD"

TMPDIR="${TMPDIR:-/tmp}"
TEMPORARY="$TMPDIR/superb-bootstrap"

DOTFILES_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

if [ -x "$(command -v sudo)" ]; then
	PERMISSION_COMMAND='sudo'
elif [ -x "$(command -v doas)" ]; then
	PERMISSION_COMMAND='doas'
elif [ -x "$(command -v termux-setup-storage)" ]; then
	PACKAGEMANAGER_MAIN='Termux'
else
	printf '\n\033[1;7;31m%s\033[0m\n' "Permission command not found or unsupported"
	exit 1
fi

     APT_MARK='APT';      APT_PM='apt'         ;      APT_COMMAND="$PERMISSION_COMMAND $APT_PM install --assume-yes"
  Mports_MARK='MPT';   Mports_PM='mports'      ;   Mports_COMMAND="$PERMISSION_COMMAND $Mports_PM install"
 OpenBSD_MARK='OBP';  OpenBSD_PM='pkg_add'     ;  OpenBSD_COMMAND="$PERMISSION_COMMAND $OpenBSD_PM -I"
  Pacman_MARK='PAC';   Pacman_PM='pacman'      ;   Pacman_COMMAND="$PERMISSION_COMMAND $Pacman_PM --sync --noconfirm --needed"
 Portage_MARK='PTG';  Portage_PM='emerge'      ;  Portage_COMMAND="$PERMISSION_COMMAND $Portage_PM"
   PKGIN_MARK='PIN';    PKGIN_PM='pkgin'       ;    PKGIN_COMMAND="$PERMISSION_COMMAND $PKGIN_PM install -y"
   PKGNG_MARK='PNG';    PKGNG_PM='pkg'         ;    PKGNG_COMMAND="$PERMISSION_COMMAND $PKGNG_PM install -y"
Slackpkg_MARK='SLK'; Slackpkg_PM='slackpkg'    ; Slackpkg_COMMAND="$PERMISSION_COMMAND $Slackpkg_PM install"
  Termux_MARK='TMP';   Termux_PM='pkg'         ;   Termux_COMMAND="$Termux_PM install --assume-yes"
    XBPS_MARK='XBP';     XBPS_PM='xbps-install';     XBPS_COMMAND="$PERMISSION_COMMAND $XBPS_PM --yes"
  Zypper_MARK='ZPR';   Zypper_PM='zypper'      ;   Zypper_COMMAND="$PERMISSION_COMMAND $Zypper_PM --non-interactive install"
     AUR_MARK='AUR';      AUR_PM='paru'        ;      AUR_COMMAND="$AUR_PM --sync --skipreview --useask --noconfirm --needed"
 Flatpak_MARK='FLA';  Flatpak_PM='flatpak'     ;  Flatpak_COMMAND="$PERMISSION_COMMAND $Flatpak_PM install"
Homebrew_MARK='HBR'; Homebrew_PM='brew'        ; Homebrew_COMMAND="$Homebrew_PM install"
MacPorts_MARK='MCP'; MacPorts_PM='port'        ; MacPorts_COMMAND="$PERMISSION_COMMAND $MacPorts_PM install"
     MAS_MARK='MAS';      MAS_PM='mas'         ;      MAS_COMMAND="$MAS_PM install"
     SBO_MARK='SBO';      SBO_PM='sbopkg'      ;      SBO_COMMAND="$PERMISSION_COMMAND $SBO_PM -ifq"
    Snap_MARK='SNA';     Snap_PM='snap'        ;     Snap_COMMAND="$PERMISSION_COMMAND $Snap_PM install"
    pipx_MARK='PIX';     pipx_PM='pipx'        ;     pipx_COMMAND="python3 -m $pipx_PM install"

if [ -z "$PACKAGEMANAGER_MAIN" ]; then
	case $(uname -s | tr '[:upper:]' '[:lower:]') in
		'darwin'*)
			PACKAGEMANAGER_LIST='Homebrew MacPorts MAS'
		;;
		'freebsd'*)
			PACKAGEMANAGER_MAIN='PKGNG'
		;;
		'midnightbsd'*)
			PACKAGEMANAGER_MAIN='Mports'
		;;
		'netbsd'*)
			PACKAGEMANAGER_MAIN='PKGIN'
		;;
		'openbsd'*)
			PACKAGEMANAGER_MAIN='OpenBSD'
		;;
		*)

			for packagemanager_check in 'APT' 'Pacman' 'Portage' 'Slackpkg' 'XBPS' 'Zypper'; do
				[ -x "$(eval command -v \$${packagemanager_check}_PM)" ] && {
					PACKAGEMANAGER_MAIN="$packagemanager_check"
					break
				}
			done

			[ "$PACKAGEMANAGER_MAIN"  = 'Pacman'   ] && PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST AUR"
			[ "$PACKAGEMANAGER_MAIN"  = 'Slackpkg' ] && PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST SBO"
			                                            PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST Flatpak"
			                                            PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST Homebrew"
			                                            PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST pipx"

			if [ "$PACKAGEMANAGER_MAIN" = 'APT' ] || [ "$PACKAGEMANAGER_MAIN" = 'Pacman' ]; then
				PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST Snap"
			fi
		;;
	esac
fi

PACKAGEMANAGER_LIST="$PACKAGEMANAGER_MAIN $PACKAGEMANAGER_LIST" # This is a list of package managers supported on bootstrapping OS

# Functions
superbbootstrap_install_packages() {
	if [ -f "$1" ]; then
		packages_list=$(sed -e 's/#.*$//g' "$1")
	elif [ -z "$PACKAGEMANAGER_MAIN" ]; then
		printf '\n\033[1;7;31m%s\033[0m\n' "Main packages manager not found or unsupported"
		exit 1
	else
		printf '\n\033[1;7;31m%s\033[0m\n' 'Packages list not found'
		exit 1
	fi

	for packagemanager in $PACKAGEMANAGER_LIST; do
		eval "mark=\"\$${packagemanager}_MARK\""
		eval "install_command=\"\$${packagemanager}_COMMAND\""

		# Find packages with mark
		packages_installing=$(printf '%s' "$packages_list" | sed -e "/^.*$mark:.*\$/!d;s/.*$mark://g" -e 's/[[:space:]].*$//g;/^$/d' | tr '\n' ' ')

		# If finded, setup package manager then install packages
		[ -n "$packages_installing" ] && {
			# Remove lines with current mark so packages don't get reinstall on another package managers later on
			packages_list=$(printf '%s' "$packages_list" | sed -e "s/^.*$mark.*\$//g")

			printf '\n\033[1;7;35m%s\033[0m\n' "Setting up $packagemanager"
			eval "superbbootstrap_$packagemanager"

			printf '\n\033[1;7;32m%s\033[0m\n' "Installing $packagemanager packages"
			eval "$install_command $packages_installing"
		}
	done
}

superbbootstrap_APT() {
	$PERMISSION_COMMAND apt update  --assume-yes
	$PERMISSION_COMMAND apt upgrade --assume-yes
}

superbbootstrap_Mports() {
	$PERMISSION_COMMAND mport index
	$PERMISSION_COMMAND mport upgrade
}

superbbootstrap_OpenBSD() {
	$PERMISSION_COMMAND syspatch
}

superbbootstrap_Pacman() {
	yes | LC_ALL=en_US.UTF-8 $PERMISSION_COMMAND pacman --sync --sysupgrade --refresh --needed
}

superbbootstrap_Portage() {
	$PERMISSION_COMMAND emerge --sync
	$PERMISSION_COMMAND emerge --update --newuse --deep --with-bdeps=y @world
}

superbbootstrap_PKGIN() {
	$PERMISSION_COMMAND pkgin update -y
	$PERMISSION_COMMAND pkgin upgrade -y
}

superbbootstrap_PKGNG() {
	$PERMISSION_COMMAND pkg update -y
	$PERMISSION_COMMAND pkg upgrade -y
}

superbbootstrap_Slackpkg() {
	$PERMISSION_COMMAND slackpkg update gpg
	$PERMISSION_COMMAND slackpkg update
}

superbbootstrap_Termux() {
	pkg update  --assume-yes
	pkg upgrade --assume-yes
}

superbbootstrap_XBPS() {
	$PERMISSION_COMMAND xbps-install --sync --yes --update # Update XBPS itself so it can update other packages
	$PERMISSION_COMMAND xbps-install --sync --yes --update # Update packages
	$PERMISSION_COMMAND xbps-install --sync --yes void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree void-repo-debug
}

superbbootstrap_Zypper() {
	$PERMISSION_COMMAND zypper --non-interactive update
}

superbbootstrap_AUR() {
	if [ ! -x "$(command -v 'paru')" ]; then
		$Pacman_COMMAND git base-devel
		git clone 'https://aur.archlinux.org/paru-bin.git' "$TEMPORARY/paru"
		cd "$TEMPORARY/paru" || exit 1
		makepkg --syncdeps --noconfirm
		$PERMISSION_COMMAND $Pacman_PM --needed --noconfirm --upgrade paru-bin-*.zst 
		cd "$WD" || exit 1
	else
		printf '%s\n' "Paru has been installed"
		$AUR_COMMAND --sysupgrade --refresh --aur
	fi
}

superbbootstrap_Flatpak() {
	if [ ! -x "$(command -v 'flatpak')" ]; then
		case "$PACKAGEMANAGER_MAIN" in
			'APT')         $APT_COMMAND flatpak gnome-software-plugin-flatpak ;;
			'Portage') $Portage_COMMAND sys-apps/flatpak                      ;;
			'Pacman')   $Pacman_COMMAND flatpak                               ;;
			'XBPS')       $XBPS_COMMAND flatpak                               ;;
			'Zypper')   $Zypper_COMMAND flatpak                               ;;
			'Slackpkg')
				if [ ! -x "$(command -v "$SBO_PM")" ]; then
					superbbootstrap_SBO
				fi

				$SBO_COMMAND flatpak
			;;
		esac
	else
		printf '%s\n' "Flatpak has been installed"
	fi

	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

superbbootstrap_Homebrew() {
	if [ ! -x "$(command -v 'brew')" ] >/dev/null; then
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	else
		printf '%s\n' "Homebrew has been installed"
	fi
}

superbbootstrap_MacPorts() {
	[ ! -x "$(command -v 'xcode')" ] && {
		printf '\n\033[1;7;31m%s\033[0m\n' 'Please install XCode first: https://guide.macports.org/#installing.xcode'
		exit 1
	}

	xcode-select --install
	$PERMISSION_COMMAND xcodebuild -license
	cd "$TEMPORARY" || exit 1
	curl --remote-header-name --location --remote-name "https://github.com/macports/macports-base/releases/latest/download/MacPorts-$MACPORT_VERSION-$OS_VERSION_NUMBER-$OS_VERSION_NAME.pkg"
	$PERMISSION_COMMAND installer -pkg "$TEMPORARY/MacPorts-$MACPORT_VERSION-$OS_VERSION_NUMBER-$OS_VERSION_NAME.pkg" -target '/'
	cd "$WD" || exit 1
}

superbbootstrap_MAS() {
	if [ ! -x "$(command -v "$MAS_PM")" ]; then
		if   [ -x "$(command -v "$Homebrew_PM")" ]; then $Homebrew_COMMAND mas
		elif [ -x "$(command -v "$MacPorts_PM")" ]; then $MacPorts_COMMAND mas
		else
			[ ! -x "$(command -v "$Homebrew_PM")" ] && superbbootstrap_Homebrew

			$Homebrew_COMMAND mas
		fi
	else
		printf '%s\n' "MAS has been installed"
	fi

	mas account
	mas signin --dialog "$APPLE_ID"
}

superbbootstrap_SBO() {
	if [ ! -x "$(command -v 'sbopkg')" ]; then
		SBO_VERSION=$(curl -s "https://api.github.com/repos/sbopkg/sbopkg/releases/latest" | grep -e 'tag_name' | cut -f '4' -d '"')

		cd "$TEMPORARY" || exit 1
		curl --remote-header-name --location --remote-name "https://github.com/sbopkg/sbopkg/releases/download/$SBO_VERSION/sbopkg-$SBO_VERSION-noarch-1_wsr.tgz"
		upgradepkg --install-new "$TEMPORARY/sbopkg-$SBO_VERSION-noarch-1_wsr.tgz"
		cd "$WD" || exit 1
		$PERMISSION_COMMAND mkdir -p "/var/lib/sbopkg/SBo/$(cut -f '2' -d ' ' '/etc/slackware-version')" "/var/lib/sbopkg/queues" "/var/log/sbopkg" "/var/cache/sbopkg"
		$PERMISSION_COMMAND sbopkg -rq
		$PERMISSION_COMMAND sqg -a
	else
		printf '%s\n' "Sbopkg has been installed"
	fi
}

superbbootstrap_Snap() {
	if [ ! -x "$(command -v 'snap')" ]; then
		if [ $PACKAGEMANAGER_MAIN = 'Pacman' ]; then
			$PERMISSION_COMMAND pacman --sync --noconfirm --needed git
			git clone 'https://aur.archlinux.org/snapd.git' "$TEMPORARY/snap"
			cd "$TEMPORARY/snap" || exit 1
			makepkg -si
			cd "$WD" || exit 1
			$PERMISSION_COMMAND systemctl enable --now snapd.socket
			$PERMISSION_COMMAND ln -s '/var/lib/snapd/snap' '/snap'
		elif [ $PACKAGEMANAGER_MAIN = 'APT' ]; then
			$APT_COMMAND snapd
		fi
	else
		printf '%s\n' "Snapd has been installed"
	fi

	snap install core
}

superbbootstrap_pipx() {
	if [ ! -x "$(command -v 'pipx')" ]; then
		python3 -m ensurepip
		python3 -m pip install --user pipx
		python3 -m pipx ensurepath  # note: if you change default shell after the installation you may need to run this command again in order to use installed packages
	fi
}

superbbootstrap_batch_symlink() {
	batch_symlink_directory="$1"
	batch_symlink_target="$2"
	batch_symlink_permission="$3"

	[ -n "$TRASH_PATH" ] && mkdir -p "$TRASH_PATH"

	if [ -d "$1" ]; then
		superbbootstrap_scan_directory "$batch_symlink_directory"
	else
		printf '\n\033[1;7;31m%s\033[0m\n' "'$batch_symlink_directory' not found"
	fi
}

superbbootstrap_scan_directory() {
	[ -d "$1" ] || exit 1

	for file in "$1"/.* "$1"/*; do
		[ "$file" = "$1/." ] || [ "$file" = "$1/.." ] || [ "$file" = "$1/*" ] && continue

		target="$batch_symlink_target${file#$batch_symlink_directory}"

		if [ -e "$target" ]; then
			if [ -d "$target" ] && [ ! -h "$target" ]; then
				superbbootstrap_scan_directory "$file"
			else
				# You can change how batch symlink handle conflict files
				if [ -n "$TRASH_PATH" ]; then
					rm -rf "$TRASH_PATH/$(basename "$target")" 2>&-
					$batch_symlink_permission mv -f "$target" "$TRASH_PATH/"
				else
					$batch_symlink_permission rm -rf "$target"
				fi

				$batch_symlink_permission ln -sf "$file" "$target"
			fi
		else
			$batch_symlink_permission ln -sf "$file" "$target"
		fi
	done
}


# Start
for step_check in $STEPS; do
	case "$step_check" in
		'i'|'install') steps_list="${steps_list:+$steps_list; }install_packages" ;;
		'b'|'before')  steps_list="${steps_list:+$steps_list; }before_symlink"   ;;
		'h'|'home')    steps_list="${steps_list:+$steps_list; }symlink_home"     ;;
		'r'|'root')    steps_list="${steps_list:+$steps_list; }symlink_root"     ;;
		'a'|'after')   steps_list="${steps_list:+$steps_list; }after_symlink"    ;;
		*)
			printf '\n\033[1;7;31m%s\033[0m\n' "Step '$step_check' not found"
			exit 1
		;;
	esac
done

eval "$steps_list"


exit 0
